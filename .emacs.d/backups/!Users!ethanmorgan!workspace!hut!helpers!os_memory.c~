#include <hut/base.h>
#include <hut/os_memory.h>

#if defined(HUT_LOG_MEMORY)

#include <hut/logger.h>
#include <stdio.h>
#include <stdlib.h>

mod_export void *
hut_malloc(size_t size, const char *file, const char *func, int line)
{
	void *ptr = malloc(size);

	if (!ptr) {
		return nil;
	}

	printf(GREEN_COLOR "[%s:%s:%d] " RESET_COLOR, file, func, line);
	HUT_LOG(ORANGE_COLOR "Allocated %zu bytes at %p\n" RESET_COLOR,
		size,
		ptr);
	return ptr;
}

mod_export void
hut_free(void *ptr, const char *file, const char *func, int line)
{
	free(ptr);

	printf(GREEN_COLOR "[%s:%s:%d] " RESET_COLOR, file, func, line);

	HUT_LOG(ORANGE_COLOR "Freed memory at %p\n" RESET_COLOR, ptr);
}

mod_export void *hut_calloc(size_t count,
			    size_t size,
			    const char *file,
			    const char *func,
			    int line)
{
	void *ptr = calloc(count, size);

	if (!ptr) {
		return nil;
	}

	printf(GREEN_COLOR "[%s:%s:%d] " RESET_COLOR, file, func, line);
	HUT_LOG(ORANGE_COLOR "Allocated %zu bytes at %p\n" RESET_COLOR,
		count * size,
		ptr);

	return ptr;
}

mod_export void *hut_realloc(void *ptr,
			     size_t size,
			     const char *file,
			     const char *func,
			     int line)
{
	void *next = realloc(ptr, size);

	if (!next) {
		return nil;
	}

	printf(GREEN_COLOR "[%s:%s:%d] " RESET_COLOR, file, func, line);

	HUT_LOG(ORANGE_COLOR "Reallocated %zu bytes at %p\n" RESET_COLOR,
		size,
		next);

	return next;
}

#endif
